#!/usr/bin/env bash

git config --global core.autocrlf false
git config --global core.eol LF
git config --global core.fileMode false
git config --global diff.renamelimit 5000

sudo chmod u+x ./*

project_name="$(bash "project/scripts/get-config-value.sh" "general_project_name")"
local_domain="$(bash "project/scripts/get-config-value.sh" "general_local_domain")"

db_root_password="$(bash "project/scripts/get-config-value.sh" "magento_db_root_password")"
db_name="$(bash "project/scripts/get-config-value.sh" "magento_db_name")"
db_user="$(bash "project/scripts/get-config-value.sh" "magento_db_user")"
db_password="$(bash "project/scripts/get-config-value.sh" "magento_db_password")"

echo "Creating host entries for Docker containers."
declare -a docker_container_hostnames=("local.${project_name}.${local_domain}" "local.db.${project_name}.${local_domain}" "local.phpmyadmin.${project_name}.${local_domain}" "local.redis.${project_name}.${local_domain}" "local.redis-session.${project_name}.${local_domain}" "local.mailhog.${project_name}.${local_domain}")

for docker_container_hostname in "${docker_container_hostnames[@]}"
do
   bash "project/scripts/add-hosts-entry.sh" "${docker_container_hostname}"
done

if [ -f docker-compose.yml ]
then
    echo "Creating new docker-compose.yml with configuration values."
    rm docker-compose.yml && cp docker-compose.install.yml docker-compose.yml
fi

if [ -f docker-compose.yml ]
then
    echo "Creating new docker-compose-dev.yml with configuration values."
    rm docker-compose-dev.yml && cp docker-compose-dev.install.yml docker-compose-dev.yml
fi

if [ -f docker-compose.yml ]
then
    echo "Creating new docker-sync.yml with configuration values."
    rm docker-sync.yml && cp docker-sync.install.yml docker-sync.yml
fi

if [ -f docker-compose.yml ]
then
    echo "Creating new .docker/config/magento.conf with configuration values."
    rm .docker/config/magento.conf && cp .docker/config/magento.install.conf .docker/config/magento.conf
fi

if [ "$(uname)" == "Darwin" ]; then
  # TODO: Replace git branch switch
  sed -i '' -e "s/<project_name>/${project_name}/g" docker-compose.yml \
  && sed -i '' -e "s/<local_domain>/${local_domain}/g" docker-compose.yml \
  && sed -i '' -e "s/<db_root_password>/${db_root_password}/g" docker-compose.yml \
  && sed -i '' -e "s/<db_name>/${db_name}/g" docker-compose.yml \
  && sed -i '' -e "s/<db_user>/${db_user}/g" docker-compose.yml \
  && sed -i '' -e "s/<db_password>/${db_password}/g" docker-compose.yml \
  && sed -i '' -e "s/<project_name>/${project_name}/g" docker-compose-dev.yml \
  && sed -i '' -e "s/<project_name>/${project_name}/g" docker-sync.yml \
  && sed -i '' -e "s/<project_name>/${project_name}/g" .docker/config/magento.conf
else
  # TODO: Replace git branch switch
  sed -i '' -e "s/<project_name>/${project_name}/g" docker-compose.yml \
  && sed -i '' -e "s/<local_domain>/${local_domain}/g" docker-compose.yml \
  && sed -i '' -e "s/<db_root_password>/${db_root_password}/g" docker-compose.yml \
  && sed -i '' -e "s/<db_name>/${db_name}/g" docker-compose.yml \
  && sed -i '' -e "s/<db_user>/${db_user}/g" docker-compose.yml \
  && sed -i '' -e "s/<db_password>/${db_password}/g" docker-compose.yml \
  && sed -i '' -e "s/<project_name>/${project_name}/g" .docker/config/magento.conf
fi

echo "Deleting existing Docker containers."
docker-compose down

bash start
